// Code generated by sqlc. DO NOT EDIT.

package auth_store

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createUserRecoveryStmt, err = db.PrepareContext(ctx, createUserRecovery); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserRecovery: %w", err)
	}
	if q.createUserSessionStmt, err = db.PrepareContext(ctx, createUserSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserSession: %w", err)
	}
	if q.deleteUserByEmailStmt, err = db.PrepareContext(ctx, deleteUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserByEmail: %w", err)
	}
	if q.deleteUserByIDStmt, err = db.PrepareContext(ctx, deleteUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserByID: %w", err)
	}
	if q.deleteUserRecoveryByIDStmt, err = db.PrepareContext(ctx, deleteUserRecoveryByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserRecoveryByID: %w", err)
	}
	if q.deleteUserRecoveryByRecoveryLinkStmt, err = db.PrepareContext(ctx, deleteUserRecoveryByRecoveryLink); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserRecoveryByRecoveryLink: %w", err)
	}
	if q.deleteUserSessionByAccessTokenStmt, err = db.PrepareContext(ctx, deleteUserSessionByAccessToken); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserSessionByAccessToken: %w", err)
	}
	if q.deleteUserSessionByIDStmt, err = db.PrepareContext(ctx, deleteUserSessionByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserSessionByID: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserRecoveryByIDStmt, err = db.PrepareContext(ctx, getUserRecoveryByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserRecoveryByID: %w", err)
	}
	if q.getUserRecoveryByRecoveryLinkStmt, err = db.PrepareContext(ctx, getUserRecoveryByRecoveryLink); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserRecoveryByRecoveryLink: %w", err)
	}
	if q.getUserSessionByAccessTokenStmt, err = db.PrepareContext(ctx, getUserSessionByAccessToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserSessionByAccessToken: %w", err)
	}
	if q.getUserSessionByIDStmt, err = db.PrepareContext(ctx, getUserSessionByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserSessionByID: %w", err)
	}
	if q.listPaginatedUsersStmt, err = db.PrepareContext(ctx, listPaginatedUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListPaginatedUsers: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserEmailStmt, err = db.PrepareContext(ctx, updateUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserEmail: %w", err)
	}
	if q.updateUserHashedPasswordStmt, err = db.PrepareContext(ctx, updateUserHashedPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserHashedPassword: %w", err)
	}
	if q.updateUserNameStmt, err = db.PrepareContext(ctx, updateUserName); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserName: %w", err)
	}
	if q.updateUserPermissionsStmt, err = db.PrepareContext(ctx, updateUserPermissions); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPermissions: %w", err)
	}
	if q.updateUserRecoveryByRecoveryLinkStmt, err = db.PrepareContext(ctx, updateUserRecoveryByRecoveryLink); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserRecoveryByRecoveryLink: %w", err)
	}
	if q.updateUserRecoveryByUserIDStmt, err = db.PrepareContext(ctx, updateUserRecoveryByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserRecoveryByUserID: %w", err)
	}
	if q.updateUserRoleStmt, err = db.PrepareContext(ctx, updateUserRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserRole: %w", err)
	}
	if q.updateUserSessionByUserAccessTokenStmt, err = db.PrepareContext(ctx, updateUserSessionByUserAccessToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserSessionByUserAccessToken: %w", err)
	}
	if q.updateUserSessionByUserIDStmt, err = db.PrepareContext(ctx, updateUserSessionByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserSessionByUserID: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createUserRecoveryStmt != nil {
		if cerr := q.createUserRecoveryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserRecoveryStmt: %w", cerr)
		}
	}
	if q.createUserSessionStmt != nil {
		if cerr := q.createUserSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserSessionStmt: %w", cerr)
		}
	}
	if q.deleteUserByEmailStmt != nil {
		if cerr := q.deleteUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByEmailStmt: %w", cerr)
		}
	}
	if q.deleteUserByIDStmt != nil {
		if cerr := q.deleteUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByIDStmt: %w", cerr)
		}
	}
	if q.deleteUserRecoveryByIDStmt != nil {
		if cerr := q.deleteUserRecoveryByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserRecoveryByIDStmt: %w", cerr)
		}
	}
	if q.deleteUserRecoveryByRecoveryLinkStmt != nil {
		if cerr := q.deleteUserRecoveryByRecoveryLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserRecoveryByRecoveryLinkStmt: %w", cerr)
		}
	}
	if q.deleteUserSessionByAccessTokenStmt != nil {
		if cerr := q.deleteUserSessionByAccessTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserSessionByAccessTokenStmt: %w", cerr)
		}
	}
	if q.deleteUserSessionByIDStmt != nil {
		if cerr := q.deleteUserSessionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserSessionByIDStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserRecoveryByIDStmt != nil {
		if cerr := q.getUserRecoveryByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserRecoveryByIDStmt: %w", cerr)
		}
	}
	if q.getUserRecoveryByRecoveryLinkStmt != nil {
		if cerr := q.getUserRecoveryByRecoveryLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserRecoveryByRecoveryLinkStmt: %w", cerr)
		}
	}
	if q.getUserSessionByAccessTokenStmt != nil {
		if cerr := q.getUserSessionByAccessTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserSessionByAccessTokenStmt: %w", cerr)
		}
	}
	if q.getUserSessionByIDStmt != nil {
		if cerr := q.getUserSessionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserSessionByIDStmt: %w", cerr)
		}
	}
	if q.listPaginatedUsersStmt != nil {
		if cerr := q.listPaginatedUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPaginatedUsersStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserEmailStmt != nil {
		if cerr := q.updateUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserEmailStmt: %w", cerr)
		}
	}
	if q.updateUserHashedPasswordStmt != nil {
		if cerr := q.updateUserHashedPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserHashedPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserNameStmt != nil {
		if cerr := q.updateUserNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserNameStmt: %w", cerr)
		}
	}
	if q.updateUserPermissionsStmt != nil {
		if cerr := q.updateUserPermissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPermissionsStmt: %w", cerr)
		}
	}
	if q.updateUserRecoveryByRecoveryLinkStmt != nil {
		if cerr := q.updateUserRecoveryByRecoveryLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserRecoveryByRecoveryLinkStmt: %w", cerr)
		}
	}
	if q.updateUserRecoveryByUserIDStmt != nil {
		if cerr := q.updateUserRecoveryByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserRecoveryByUserIDStmt: %w", cerr)
		}
	}
	if q.updateUserRoleStmt != nil {
		if cerr := q.updateUserRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserRoleStmt: %w", cerr)
		}
	}
	if q.updateUserSessionByUserAccessTokenStmt != nil {
		if cerr := q.updateUserSessionByUserAccessTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserSessionByUserAccessTokenStmt: %w", cerr)
		}
	}
	if q.updateUserSessionByUserIDStmt != nil {
		if cerr := q.updateUserSessionByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserSessionByUserIDStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                     DBTX
	tx                                     *sql.Tx
	createUserStmt                         *sql.Stmt
	createUserRecoveryStmt                 *sql.Stmt
	createUserSessionStmt                  *sql.Stmt
	deleteUserByEmailStmt                  *sql.Stmt
	deleteUserByIDStmt                     *sql.Stmt
	deleteUserRecoveryByIDStmt             *sql.Stmt
	deleteUserRecoveryByRecoveryLinkStmt   *sql.Stmt
	deleteUserSessionByAccessTokenStmt     *sql.Stmt
	deleteUserSessionByIDStmt              *sql.Stmt
	getUserByEmailStmt                     *sql.Stmt
	getUserByIDStmt                        *sql.Stmt
	getUserRecoveryByIDStmt                *sql.Stmt
	getUserRecoveryByRecoveryLinkStmt      *sql.Stmt
	getUserSessionByAccessTokenStmt        *sql.Stmt
	getUserSessionByIDStmt                 *sql.Stmt
	listPaginatedUsersStmt                 *sql.Stmt
	listUsersStmt                          *sql.Stmt
	updateUserStmt                         *sql.Stmt
	updateUserEmailStmt                    *sql.Stmt
	updateUserHashedPasswordStmt           *sql.Stmt
	updateUserNameStmt                     *sql.Stmt
	updateUserPermissionsStmt              *sql.Stmt
	updateUserRecoveryByRecoveryLinkStmt   *sql.Stmt
	updateUserRecoveryByUserIDStmt         *sql.Stmt
	updateUserRoleStmt                     *sql.Stmt
	updateUserSessionByUserAccessTokenStmt *sql.Stmt
	updateUserSessionByUserIDStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                     tx,
		tx:                                     tx,
		createUserStmt:                         q.createUserStmt,
		createUserRecoveryStmt:                 q.createUserRecoveryStmt,
		createUserSessionStmt:                  q.createUserSessionStmt,
		deleteUserByEmailStmt:                  q.deleteUserByEmailStmt,
		deleteUserByIDStmt:                     q.deleteUserByIDStmt,
		deleteUserRecoveryByIDStmt:             q.deleteUserRecoveryByIDStmt,
		deleteUserRecoveryByRecoveryLinkStmt:   q.deleteUserRecoveryByRecoveryLinkStmt,
		deleteUserSessionByAccessTokenStmt:     q.deleteUserSessionByAccessTokenStmt,
		deleteUserSessionByIDStmt:              q.deleteUserSessionByIDStmt,
		getUserByEmailStmt:                     q.getUserByEmailStmt,
		getUserByIDStmt:                        q.getUserByIDStmt,
		getUserRecoveryByIDStmt:                q.getUserRecoveryByIDStmt,
		getUserRecoveryByRecoveryLinkStmt:      q.getUserRecoveryByRecoveryLinkStmt,
		getUserSessionByAccessTokenStmt:        q.getUserSessionByAccessTokenStmt,
		getUserSessionByIDStmt:                 q.getUserSessionByIDStmt,
		listPaginatedUsersStmt:                 q.listPaginatedUsersStmt,
		listUsersStmt:                          q.listUsersStmt,
		updateUserStmt:                         q.updateUserStmt,
		updateUserEmailStmt:                    q.updateUserEmailStmt,
		updateUserHashedPasswordStmt:           q.updateUserHashedPasswordStmt,
		updateUserNameStmt:                     q.updateUserNameStmt,
		updateUserPermissionsStmt:              q.updateUserPermissionsStmt,
		updateUserRecoveryByRecoveryLinkStmt:   q.updateUserRecoveryByRecoveryLinkStmt,
		updateUserRecoveryByUserIDStmt:         q.updateUserRecoveryByUserIDStmt,
		updateUserRoleStmt:                     q.updateUserRoleStmt,
		updateUserSessionByUserAccessTokenStmt: q.updateUserSessionByUserAccessTokenStmt,
		updateUserSessionByUserIDStmt:          q.updateUserSessionByUserIDStmt,
	}
}
