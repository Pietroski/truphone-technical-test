// Code generated by sqlc. DO NOT EDIT.

package device_store

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createDeviceStmt, err = db.PrepareContext(ctx, createDevice); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDevice: %w", err)
	}
	if q.deleteDeviceStmt, err = db.PrepareContext(ctx, deleteDevice); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDevice: %w", err)
	}
	if q.deleteUserDevicesStmt, err = db.PrepareContext(ctx, deleteUserDevices); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserDevices: %w", err)
	}
	if q.getDeviceStmt, err = db.PrepareContext(ctx, getDevice); err != nil {
		return nil, fmt.Errorf("error preparing query GetDevice: %w", err)
	}
	if q.getPaginatedUserDevicesStmt, err = db.PrepareContext(ctx, getPaginatedUserDevices); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaginatedUserDevices: %w", err)
	}
	if q.getUserDevicesStmt, err = db.PrepareContext(ctx, getUserDevices); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserDevices: %w", err)
	}
	if q.listDevicesStmt, err = db.PrepareContext(ctx, listDevices); err != nil {
		return nil, fmt.Errorf("error preparing query ListDevices: %w", err)
	}
	if q.listPaginatedDevicesStmt, err = db.PrepareContext(ctx, listPaginatedDevices); err != nil {
		return nil, fmt.Errorf("error preparing query ListPaginatedDevices: %w", err)
	}
	if q.updateDeviceStmt, err = db.PrepareContext(ctx, updateDevice); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDevice: %w", err)
	}
	if q.updateUserDeviceStmt, err = db.PrepareContext(ctx, updateUserDevice); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserDevice: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createDeviceStmt != nil {
		if cerr := q.createDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDeviceStmt: %w", cerr)
		}
	}
	if q.deleteDeviceStmt != nil {
		if cerr := q.deleteDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDeviceStmt: %w", cerr)
		}
	}
	if q.deleteUserDevicesStmt != nil {
		if cerr := q.deleteUserDevicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserDevicesStmt: %w", cerr)
		}
	}
	if q.getDeviceStmt != nil {
		if cerr := q.getDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDeviceStmt: %w", cerr)
		}
	}
	if q.getPaginatedUserDevicesStmt != nil {
		if cerr := q.getPaginatedUserDevicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaginatedUserDevicesStmt: %w", cerr)
		}
	}
	if q.getUserDevicesStmt != nil {
		if cerr := q.getUserDevicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserDevicesStmt: %w", cerr)
		}
	}
	if q.listDevicesStmt != nil {
		if cerr := q.listDevicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listDevicesStmt: %w", cerr)
		}
	}
	if q.listPaginatedDevicesStmt != nil {
		if cerr := q.listPaginatedDevicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPaginatedDevicesStmt: %w", cerr)
		}
	}
	if q.updateDeviceStmt != nil {
		if cerr := q.updateDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDeviceStmt: %w", cerr)
		}
	}
	if q.updateUserDeviceStmt != nil {
		if cerr := q.updateUserDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserDeviceStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	createDeviceStmt            *sql.Stmt
	deleteDeviceStmt            *sql.Stmt
	deleteUserDevicesStmt       *sql.Stmt
	getDeviceStmt               *sql.Stmt
	getPaginatedUserDevicesStmt *sql.Stmt
	getUserDevicesStmt          *sql.Stmt
	listDevicesStmt             *sql.Stmt
	listPaginatedDevicesStmt    *sql.Stmt
	updateDeviceStmt            *sql.Stmt
	updateUserDeviceStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		createDeviceStmt:            q.createDeviceStmt,
		deleteDeviceStmt:            q.deleteDeviceStmt,
		deleteUserDevicesStmt:       q.deleteUserDevicesStmt,
		getDeviceStmt:               q.getDeviceStmt,
		getPaginatedUserDevicesStmt: q.getPaginatedUserDevicesStmt,
		getUserDevicesStmt:          q.getUserDevicesStmt,
		listDevicesStmt:             q.listDevicesStmt,
		listPaginatedDevicesStmt:    q.listPaginatedDevicesStmt,
		updateDeviceStmt:            q.updateDeviceStmt,
		updateUserDeviceStmt:        q.updateUserDeviceStmt,
	}
}
