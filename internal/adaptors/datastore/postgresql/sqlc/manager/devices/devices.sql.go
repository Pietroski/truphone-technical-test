// Code generated by sqlc. DO NOT EDIT.
// source: devices.sql

package device_store

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (device_id, user_id, device_name, device_brand)
VALUES ($1, $2, $3, $4)
RETURNING row_id, device_id, user_id, device_name, device_brand, created_at, updated_at
`

type CreateDeviceParams struct {
	DeviceID    uuid.UUID `json:"deviceID"`
	UserID      uuid.UUID `json:"userID"`
	DeviceName  string    `json:"deviceName"`
	DeviceBrand string    `json:"deviceBrand"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Devices, error) {
	row := q.queryRow(ctx, q.createDeviceStmt, createDevice,
		arg.DeviceID,
		arg.UserID,
		arg.DeviceName,
		arg.DeviceBrand,
	)
	var i Devices
	err := row.Scan(
		&i.RowID,
		&i.DeviceID,
		&i.UserID,
		&i.DeviceName,
		&i.DeviceBrand,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE
FROM devices
WHERE device_id = $1
`

func (q *Queries) DeleteDevice(ctx context.Context, deviceID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteDeviceStmt, deleteDevice, deviceID)
	return err
}

const deleteUserDevices = `-- name: DeleteUserDevices :exec
DELETE
FROM devices
WHERE user_id = $1
`

func (q *Queries) DeleteUserDevices(ctx context.Context, userID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserDevicesStmt, deleteUserDevices, userID)
	return err
}

const getDevice = `-- name: GetDevice :one
SELECT row_id, device_id, user_id, device_name, device_brand, created_at, updated_at
FROM devices
WHERE device_id = $1
LIMIT 1
`

func (q *Queries) GetDevice(ctx context.Context, deviceID uuid.UUID) (Devices, error) {
	row := q.queryRow(ctx, q.getDeviceStmt, getDevice, deviceID)
	var i Devices
	err := row.Scan(
		&i.RowID,
		&i.DeviceID,
		&i.UserID,
		&i.DeviceName,
		&i.DeviceBrand,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaginatedUserDevices = `-- name: GetPaginatedUserDevices :one
SELECT row_id, device_id, user_id, device_name, device_brand, created_at, updated_at
FROM devices
WHERE user_id = $1
ORDER BY row_id
LIMIT $2 OFFSET $3
`

type GetPaginatedUserDevicesParams struct {
	UserID uuid.UUID `json:"userID"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetPaginatedUserDevices(ctx context.Context, arg GetPaginatedUserDevicesParams) (Devices, error) {
	row := q.queryRow(ctx, q.getPaginatedUserDevicesStmt, getPaginatedUserDevices, arg.UserID, arg.Limit, arg.Offset)
	var i Devices
	err := row.Scan(
		&i.RowID,
		&i.DeviceID,
		&i.UserID,
		&i.DeviceName,
		&i.DeviceBrand,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserDevices = `-- name: GetUserDevices :one
SELECT row_id, device_id, user_id, device_name, device_brand, created_at, updated_at
FROM devices
WHERE user_id = $1
ORDER BY row_id
`

func (q *Queries) GetUserDevices(ctx context.Context, userID uuid.UUID) (Devices, error) {
	row := q.queryRow(ctx, q.getUserDevicesStmt, getUserDevices, userID)
	var i Devices
	err := row.Scan(
		&i.RowID,
		&i.DeviceID,
		&i.UserID,
		&i.DeviceName,
		&i.DeviceBrand,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDevices = `-- name: ListDevices :many
SELECT row_id, device_id, user_id, device_name, device_brand, created_at, updated_at
FROM devices
ORDER BY row_id
`

func (q *Queries) ListDevices(ctx context.Context) ([]Devices, error) {
	rows, err := q.query(ctx, q.listDevicesStmt, listDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Devices{}
	for rows.Next() {
		var i Devices
		if err := rows.Scan(
			&i.RowID,
			&i.DeviceID,
			&i.UserID,
			&i.DeviceName,
			&i.DeviceBrand,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaginatedDevices = `-- name: ListPaginatedDevices :many
SELECT row_id, device_id, user_id, device_name, device_brand, created_at, updated_at
FROM devices
ORDER BY row_id
LIMIT $1 OFFSET $2
`

type ListPaginatedDevicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPaginatedDevices(ctx context.Context, arg ListPaginatedDevicesParams) ([]Devices, error) {
	rows, err := q.query(ctx, q.listPaginatedDevicesStmt, listPaginatedDevices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Devices{}
	for rows.Next() {
		var i Devices
		if err := rows.Scan(
			&i.RowID,
			&i.DeviceID,
			&i.UserID,
			&i.DeviceName,
			&i.DeviceBrand,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE devices
SET (device_id, user_id, device_name, device_brand, updated_at) = ($1, $2, $3, $4, $5)
WHERE device_id = $1
RETURNING row_id, device_id, user_id, device_name, device_brand, created_at, updated_at
`

type UpdateDeviceParams struct {
	DeviceID    uuid.UUID    `json:"deviceID"`
	UserID      uuid.UUID    `json:"userID"`
	DeviceName  string       `json:"deviceName"`
	DeviceBrand string       `json:"deviceBrand"`
	UpdatedAt   sql.NullTime `json:"updatedAt"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (Devices, error) {
	row := q.queryRow(ctx, q.updateDeviceStmt, updateDevice,
		arg.DeviceID,
		arg.UserID,
		arg.DeviceName,
		arg.DeviceBrand,
		arg.UpdatedAt,
	)
	var i Devices
	err := row.Scan(
		&i.RowID,
		&i.DeviceID,
		&i.UserID,
		&i.DeviceName,
		&i.DeviceBrand,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserDevice = `-- name: UpdateUserDevice :one
UPDATE devices
SET (device_id, user_id, device_name, device_brand, updated_at) = ($1, $2, $3, $4, $5)
WHERE device_id = $1 AND user_id = $2
RETURNING row_id, device_id, user_id, device_name, device_brand, created_at, updated_at
`

type UpdateUserDeviceParams struct {
	DeviceID    uuid.UUID    `json:"deviceID"`
	UserID      uuid.UUID    `json:"userID"`
	DeviceName  string       `json:"deviceName"`
	DeviceBrand string       `json:"deviceBrand"`
	UpdatedAt   sql.NullTime `json:"updatedAt"`
}

func (q *Queries) UpdateUserDevice(ctx context.Context, arg UpdateUserDeviceParams) (Devices, error) {
	row := q.queryRow(ctx, q.updateUserDeviceStmt, updateUserDevice,
		arg.DeviceID,
		arg.UserID,
		arg.DeviceName,
		arg.DeviceBrand,
		arg.UpdatedAt,
	)
	var i Devices
	err := row.Scan(
		&i.RowID,
		&i.DeviceID,
		&i.UserID,
		&i.DeviceName,
		&i.DeviceBrand,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
